<?xml version="1.0"?>
<application name="block Gauss Jordan">
<description> Block linear system resolution by Gauss Jordan elimination
</description>
<graph>
blockcount:=BC;

par
	par(i:=0;blockcount-1)(j:=0;blockcount-1)
	do
		compute XMP_genMat(A[i][j],i,j);
		notify(Aev[i][j][0]);
	enddo
//
	par(i:=0;blockcount-1)
	do
		compute XMP_genVect(B[i],i);
		notify(Bev[i][0]);
	enddo
endpar

par (k:= 0; blockcount-1)
do
	par
		wait(Aev[k][k][k]);
		compute XMP_inversion(A[k][k],AInv[k]);
		notify(Aev[k][k][k+1]);
	//
		if(k neq blockcount-1) then
			par(j:= k+1; blockcount-1)
			do
				par
					wait(Aev[k][k][k+1]);
					wait(Aev[k][j][k]);
					compute XMP_prodMat(AInv[k],A[k][j]);
					notify(Aev[k][j][k+1]);
				//
					par (i:= 0; blockcount-1)
					do
						if(k neq i) then
							#A[i,j] = A[i,j] - A[i,k] * A[k,j]
							wait(Aev[i][k][k]);
							wait(Aev[i][j][k]);
							wait(Aev[k][j][k+1]);
							compute XMP_prodDiff(A[i][k],A[k][j],A[i][j]);
							notify(Aev[i][j][k+1]);
						endif
					enddo
				endpar
			enddo
		endif
	//
		wait(Aev[k][k][k+1]);
		wait(Bev[k][k]);
		compute XMP_prodMV(AInv[k],B[k]);
		notify(Bev[k][k+1]);
	//
		par (i:= 0; blockcount-1)
		do
			if(k neq i) then
				#B[i] = B[i] - A[i,k] * B[k]
				wait(Bev[i][k]);
				wait(Bev[k][k+1]);
				wait(Aev[i][k][k]);
				compute XMP_prodDiffMV(A[i][k],B[k],B[i]);
				notify(Bev[i][k+1]);
			endif
		enddo
	endpar
enddo
</graph>
</application>
