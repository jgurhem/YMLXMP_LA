<?xml version="1.0"?>
<component type="impl" name="XMP_factoLU"
	abstract="XMP_factoLU"
	description="make a LU factorization from A and put L and U into A">
<impl lang="XMP"  nodes="CPU:(DISTVECT)">
  <templates>
    <template name="t" format="block" size="SIZE"/>
  </templates>
  <distribute>
    <param template="t" name="A0(SIZE,SIZE)" align="[i][*]:(i)"/>
  </distribute>
<header>
<![CDATA[
#include<xmp.h>
double akj[SIZE];
]]>
</header>
<source>
<![CDATA[
double btemp, akk;
int n,i,j,k;

n=SIZE;

for (k=0; k<n-1; k++ ){
	akk=0.0;
#pragma xmp task on t(k)
	akk=A0[k][k];
#pragma xmp reduction(+:akk)


#pragma xmp loop (i) on t(i)
	for(i=k+1;i<n;i++){
		A0[i][k] = A0[i][k] / akk;
	}

	for(j=k+1;j<n;j++){
		akj[j]=0.0;
	}

#pragma xmp task on t(k)
	for(j=k+1;j<n;j++){
		akj[j] = A0[k][j];
	}
#pragma xmp reduction(+:akj)

#pragma xmp loop (i) on t(i)
	for(i=k+1;i<n;i++){ 
		for(j=k+1;j<n;j++){
			A0[i][j] = A0[i][j] - A0[i][k] * akj[j];
		}
	}
}

]]>
</source>
<footer />
</impl>
</component>

