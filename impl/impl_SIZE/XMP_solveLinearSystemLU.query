<?xml version="1.0"?>
<component type="impl" name="XMP_solveLinearSystemLU" 
	abstract="XMP_solveLinearSystemLU" 
	description="solve Ax=b and save the results into b">
<impl lang="XMP"  nodes="CPU:(DISTVECT)">
  <templates>
    <template name="t" format="block" size="SIZE"/>
  </templates>
  <distribute>
    <param template="t" name="A0(SIZE,SIZE)" align="[i][*]:(i)"/>
    <param template="t" name="b0(SIZE)" align="[i]:(i)"/>
  </distribute>
<header>
<![CDATA[
#include<xmp.h>
]]>
</header>
<source>
<![CDATA[
double btemp, akj, akk;
int n,i,j,k;

n=SIZE;

for (k=0; k<n-1; k++ ){
	akk=0.0;
#pragma xmp task on t(k)
	akk=A0[k][k];
#pragma xmp reduction(+:akk)	


#pragma xmp loop (i) on t(i)
	for(i=k+1;i<n;i++){
		A0[i][k] = A0[i][k] / akk;

		for(j=k+1;j<n;j++){


			akj=0.0;
#pragma xmp task on t(k)
			akj=A0[k][j];
#pragma xmp reduction(+:akj)	
			
			A0[i][j] = A0[i][j] - A0[i][k] * akj;
		}
	}
}

/*
for(i=0;i<n-1;i++){
	for (k=i+1;k<n;k++){
		b0[k] = b0[k] - A0[k][i] * b0[i];
	}
}

for(i=n-1;i>=0;i--){
        b0[i] = b0[i] / A[i][i];
	for (k=0;k<i;k++){
        	b0[k] = b0[k] - A0[k][i] * b0[i];
        }
}
*/

/*


for(k=0;k<n;k++){

	btemp=0.0;
#pragma xmp task on t(k)
	{	
		for(i=k+1;i<n;i++){
			A0[k][i] = A0[k][i] / A0[k][k];
		} 
 
 		b0[k] = b0[k] / A0[k][k];
		btemp = b0[k];	
	}
#pragma xmp reduction(+:btemp)

	for(j=k+1;j<n;j++){
	
		akj=0.0;
#pragma xmp task on t(k)
		akj = A0[k][j];	
#pragma xmp reduction(+:akj)
	
#pragma xmp loop (i) on t(i)
		for(i=k+1;i<n;i++){
			A0[i][j] = A0[i][j] - A0[i][k] * akj;
		}


#pragma xmp task on t(j)
		b0[j] = b0[j] - A0[j][k] * btemp;
	}
}

//#pragma xmp task on t(n-1)
//b0[n-1] = b0[n-1] / A0[n-1][n-1];

for(k=n-1;k>0;k--){

	btemp=0.0;
#pragma xmp task on t(k)
	btemp=b0[k];
#pragma xmp reduction(+:btemp)

#pragma xmp loop (i) on t(i)
	for (i=0;i<k;i++){
		b0[i] = b0[i] - A0[i][k] * btemp;
	}
}
*/
]]>
</source>
<footer />
</impl>
</component>

