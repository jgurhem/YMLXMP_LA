<?xml version="1.0"?>
<component type="impl" name="XMP_solveLinearSystemLU"
	abstract="XMP_solveLinearSystemLU"
	description="solve Ax=b and save the results into b">
<impl lang="XMP"  nodes="CPU:(DISTVECT)">
  <templates>
    <template name="t" format="block" size="SIZE"/>
  </templates>
  <distribute>
    <param template="t" name="A0(SIZE,SIZE)" align="[i][*]:(i)"/>
    <param template="t" name="b0(SIZE)" align="[i]:(i)"/>
  </distribute>
<header>
<![CDATA[
#include<xmp.h>
double akj[SIZE];
]]>
</header>
<source>
<![CDATA[
double btemp, akk, bi;
int n,i,j,k;

n=SIZE;

for (k=0;k<n-1;k++){
	akk = 0.0;
#pragma xmp task on t(k)
	akk=A0[k][k];
#pragma xmp reduction(+:akk)


#pragma xmp loop (i) on t(i)
	for(i=k+1;i<n;i++){
		A0[i][k] = A0[i][k] / akk;
	}

	for(j=k+1;j<n;j++){
		akj[j] = 0.0;
	}

#pragma xmp task on t(k)
	for(j=k+1;j<n;j++){
		akj[j] = A0[k][j];
	}
#pragma xmp reduction(+:akj)

#pragma xmp loop (i) on t(i)
	for(i=k+1;i<n;i++){ 
		for(j=k+1;j<n;j++){
			A0[i][j] = A0[i][j] - A0[i][k] * akj[j];
		}
	}
}

for(i=0;i<n-1;i++){
        bi = 0.0;
#pragma xmp task on t(i)
        bi = b0[i];
#pragma xmp reduction(+:bi)

#pragma xmp loop (k) on t(k)
	for (k=i+1;k<n;k++){
		b0[k] = b0[k] - A0[k][i] * bi;
	}
}

for(i=n-1;i>=0;i--){
#pragma xmp task on t(i)
        b0[i] = b0[i] / A0[i][i];

        bi = 0.0;
#pragma xmp task on t(i)
        bi = b0[i];
#pragma xmp reduction(+:bi)

#pragma xmp loop (k) on t(k)
	for (k=0;k<i;k++){
        	b0[k] = b0[k] - A0[k][i] * bi;
        }
}

]]>
</source>
<footer />
</impl>
</component>

