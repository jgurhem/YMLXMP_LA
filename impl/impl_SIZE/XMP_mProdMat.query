<?xml version="1.0"?>
<component type="impl" name="XMP_mProdMat" abstract="XMP_mProdMat" description="C = -(B x A)">
<impl lang="XMP" libs="include_lib_intel" nodes="CPU:(DISTMAT1,DISTMAT2)">
  <templates>
    <template name="t" format="block,block" size="SIZE,SIZE"/>
  </templates>
  <distribute>
    <param template="t" name="B0(SIZE,SIZE)" align="[i][j]:(j,i)"/>
    <param template="t" name="A0(SIZE,SIZE)" align="[i][j]:(j,i)"/>
    <param template="t" name="C0(SIZE,SIZE)" align="[i][j]:(j,i)"/>
  </distribute>
<header>
<![CDATA[
#include<xmp.h>

double A[SIZE][SIZE];
double B[SIZE][SIZE];

#pragma xmp align A[i][j] with t(j,i)
#pragma xmp align B[i][j] with t(j,i)

#pragma xmp shadow A[*][0]
#pragma xmp shadow B[0][*]

]]>
</header>
<source>
<![CDATA[
  int    i, j, k, n;
  double x, dtmp;

  n = SIZE;
#pragma xmp loop (i) on t(j,i)
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      B[i][j]=0;
    }
  }

#pragma xmp loop (j,i) on t(j,i)
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      B[i][j]=B0[i][j];
    }
  }

  for(i=0;i<n;i++){
#pragma xmp loop (j) on t(j,i)
    for(j=0;j<n;j++){
      A[i][j]=0;
    }
  }

#pragma xmp loop (j,i) on t(j,i)
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      A[i][j]=A0[i][j];
      C0[i][j]=0.0;
    }
  }

#pragma xmp reflect (A,B)

#pragma xmp loop (i) on t(j,i)
  for(i=0;i<n;i++){
    for(k=0;k<n;k++){
      if(B[i][k]!=0){
        dtmp=B[i][k];
#pragma xmp loop (j) on t(j,i)
        for(j=0;j<n;j++){
//          int jj=j;
//          C0[i][jj] -= (dtmp*A[k][jj]) ;
          C0[i][j] -= (dtmp*A[k][j]) ;
        }
      }
    }
  }

/*
#pragma xmp loop (j,i) on t(j,i)
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      x=0.0;
      for(k=0;k<n;k++)
        x+= (B[i][k]*A[k][j]) ;
      C0[i][j]=-x;
    }
  }
*/
]]>
</source>
<footer />
</impl>
</component>

